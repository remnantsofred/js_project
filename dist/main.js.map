{"version":3,"file":"main.js","mappings":"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","sources":["webpack://momos_misadventures/webpack/bootstrap","webpack://momos_misadventures/webpack/runtime/define property getters","webpack://momos_misadventures/webpack/runtime/hasOwnProperty shorthand","webpack://momos_misadventures/./src/scripts/momo.js","webpack://momos_misadventures/./src/scripts/level.js","webpack://momos_misadventures/./src/scripts/game_object.js","webpack://momos_misadventures/./src/index.js","webpack://momos_misadventures/./src/scripts/game.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","//// this should include all the logic related to the main character momo\n//// how to draw and animate momo and source files\n//// momo moves and position\nimport GameObject from './game_object';\n\nexport const CONSTANTS = {\n  GRAVITY: 2,\n  FRICTION: 0.1,\n  JUMP_SPEED: -30,\n  GROUND: 539,\n  TERMINAL_VEL:  12,\n  WALK_SPEED: 5,\n  RUN_SPEED: 9,\n  MAX_MOMO_SPEED: 20,\n  LEFTWALL: 0,\n  RIGHTWALL: 800,\n  FLYSPEED: 12,\n};\n\nconst momoImage = new Image();\n// momoImage.width = 10;\nmomoImage.src = \"./src/assets/cats/momo_walk_right.png\"\nconst momoLeft = new Image();\nmomoLeft.src = \"./src/assets/cats/momo_walk_left.png\"\nconst walkspriteWidth = 120;\nconst walkspriteHeight = 114;\n\nconst momoJumpRight = new Image();\nmomoJumpRight.src = \"./src/assets/cats/momo_pounce_right.png\"\nconst momoJumpLeft = new Image();\nmomoJumpLeft.src = \"./src/assets/cats/momo_pounce_left_shortv1.png\"\nconst jumpspriteWidth = 133;\nconst jumpspriteHeight = 156;\n\nconst momoFalling = new Image();\nmomoFalling.src = \"./src/assets/cats/momo_falling.png\"\nconst fallingspriteWidth = 146;\nconst fallingspriteHeight = 122;\n\nconst momoAmbush = new Image();\nmomoAmbush.src = \"./src/assets/cats/momo_ambush_fall.png\"\nconst ambushspriteWidth = 104;\nconst ambushspriteHeight = 119;\n\nconst upsidedownMomoright = new Image();\nupsidedownMomoright.src = \"./src/assets/cats/momo_walk_right_upside_down.png\"\nconst upsidedownMomoleft = new Image();\nupsidedownMomoleft.src = \"./src/assets/cats/momo_walk_left_upside_down.png\"\n\nconst ashyImage = new Image();\nashyImage.src = \"./src/assets/cats/ash_walk_right.png\"\nconst ashyLeft = new Image();\nashyLeft.src = \"./src/assets/cats/ash_walk_left.png\"\n\nconst ashyScared = new Image();\nashyScared.src = \"./src/assets/cats/ashy_scared.png\"\nconst ashyScaredspriteWidth = 141;\nconst ashyScaredspriteHeight = 120;\n\nconst ambushImpactjustAsh = new Image();\nambushImpactjustAsh.src = \"./src/assets/cats/ambushcollision_justashy.png\"\nconst ambushImpactjustAshWidth = 285;\nconst ambushImpactjustAshHeight = 283;\n\nconst ambushImpact = new Image();\nambushImpact.src = \"./src/assets/cats/ambushcollision.png\"\nconst ambushImpactWidth = 285;\nconst ambushImpactHeight = 283;\n\n\nconst flyImage = new Image();\nflyImage.src = \"./src/assets/cats/TigerMothFlap4.png\";\nlet flysizeModifier = 1;\nconst flyImagewidth = 163;\nconst flyImageHeight = 80;\n\nconst momoCanonball = new Image();\nmomoCanonball.src = \"./src/assets/cats/momo_ambush_fall_action_lines.png\"; \nconst momoCannonballWidth = 298;\nconst momoCannonballHeight = 298;\n\n\n\nlet sizeModifier = 0.75;\nlet frameX = 1;\nlet frameY = 0;\n//set a maxFrame variable per row    ///// (if using multiple row sprite sheet)\nlet gameFrame = 0;\nlet staggerFrames = 10;\n//bigger staggerFrame is slower looking move\n//15 should be slow walk (5, 10, 15) 3 speeds\n//max speed staggerFrames = 5\n\nexport default class Momo {\n\n  constructor(canvasWidth, canvasHeight, ash, fly, level = null) {\n    this.canvasWidth = canvasWidth;\n    this.canvasHeight = canvasHeight;\n    this.calcXPos.bind(this);\n    this.calcYPos.bind(this);\n    this.jump.bind(this);\n    this.ash = ash;\n    this.fly = fly;\n    this.level = level;\n    this.upsidedown = false;\n    this.reset();\n  }\n\n  reset(){\n    this.width = walkspriteWidth * sizeModifier; \n    this.height = walkspriteHeight * sizeModifier;\n    this.x = this.canvasWidth / 8;\n    this.y = this.momoBottom();\n    this.yVelocity = 0;\n    this.xVelocity = 0;\n    this.direction = null;\n    this.jumped = false;\n    this.grounded = true;\n    this.upsidedown = false;\n  }\n\n  draw(ctx){\n    let prevPos = this.y;\n    this.calcYPos();\n    //// moving this section below and line 69 to collision logic //// keeping here for now because it works\n    if (this.y === prevPos && !this.jumped){\n      this.grounded = true;\n    } else {\n      this.grounded = false;\n    }\n\n    this.calcXPos();\n\n    if (!this.ash && !this.fly){\n      if(this.level === \"AMBUSH\" && this.upsidedown === true){\n        if(this.direction === \"right\" && this.xVelocity > 0) {  \n          ctx.drawImage(upsidedownMomoright, frameX * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier);\n          this.width = walkspriteWidth * sizeModifier;\n          this.height = walkspriteHeight * sizeModifier;\n          if (gameFrame % staggerFrames == 0){\n            if (frameX < 3) frameX ++;\n            else frameX = 1;}\n        } else if (this.direction === \"left\" && this.xVelocity < 0){\n          ctx.drawImage(upsidedownMomoleft, frameX * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier);\n          this.width = walkspriteWidth * sizeModifier;\n          this.height = walkspriteHeight * sizeModifier;\n          if (gameFrame % staggerFrames == 0){\n            if (frameX < 3) frameX ++;\n            else frameX = 1;}\n        } else {\n          ctx.drawImage(upsidedownMomoright, 0 * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier);\n          this.width = walkspriteWidth * sizeModifier;\n          this.height = walkspriteHeight * sizeModifier;\n        };   \n      }\n\n      if(this.upsidedown === false){  \n        if(this.jumped === false && this.xVelocity > 0 && this.direction === \"right\")  {\n          ctx.drawImage(momoImage, frameX * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier);\n          this.width = walkspriteWidth * sizeModifier;\n          this.height = walkspriteHeight * sizeModifier;\n          if (gameFrame % staggerFrames == 0){\n            if (frameX < 3) frameX ++;\n            else frameX = 1;\n          }\n          \n          gameFrame++\n        } else if (this.jumped === false && this.xVelocity < 0 && this.direction === \"left\"){\n            ctx.drawImage(momoLeft, frameX * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier);\n            this.width = walkspriteWidth * sizeModifier;\n            this.height = walkspriteHeight * sizeModifier;\n            if (gameFrame % staggerFrames == 0){\n              if (frameX < 3) frameX ++;\n              else frameX = 1;\n            }\n          \n          gameFrame++\n        } else if (this.jumped === true && this.direction === \"right\"){\n            ctx.drawImage(momoJumpRight, frameX * 165, 0, 165, 156, this.x, this.y, jumpspriteWidth * sizeModifier, jumpspriteHeight * sizeModifier);\n            this.width = jumpspriteWidth * sizeModifier;\n            this.height = jumpspriteHeight * sizeModifier;\n            if (this.yVelocity < -3 && this.yVelocity > -30){\n              frameX = 2;\n            } else if (this.yVelocity < 3 && this.yVelocity >= -3) {\n              frameX = 4;\n            } else if (this.yVelocity <= CONSTANTS.TERMINAL_VEL && this.yVelocity >= 3){\n              frameX = 5;\n            }\n          \n        } else if (this.jumped === true && this.direction === \"left\"){\n            ctx.drawImage(momoJumpLeft, frameX * jumpspriteWidth, 0, jumpspriteWidth, jumpspriteHeight, this.x, this.y, jumpspriteWidth * sizeModifier, jumpspriteHeight * sizeModifier);\n            this.width = jumpspriteWidth * sizeModifier;\n            this.height = jumpspriteHeight * sizeModifier;\n            if (this.yVelocity < -3 && this.yVelocity > -30){\n              frameX = 0;\n            } else if (this.yVelocity < 3 && this.yVelocity > -3) {\n              frameX = 2;\n            } else {\n              frameX = 3;\n            }\n        } else if (this.level === \"AMBUSH\" && this.direction === \"down\" && this.grounded === false){\n            ctx.drawImage(momoAmbush, 0 * ambushspriteWidth, 0, ambushspriteWidth, ambushspriteHeight, this.x, this.y, ambushspriteWidth * sizeModifier, ambushspriteHeight * sizeModifier);\n            this.width = ambushspriteWidth * sizeModifier;\n            this.height = ambushspriteHeight * sizeModifier;\n\n        } else if (this.direction === \"down\" && this.yVelocity !== 0){ \n          ctx.drawImage(momoFalling, 0 * fallingspriteWidth, 0, fallingspriteWidth, fallingspriteHeight, this.x, this.y, fallingspriteWidth * sizeModifier, fallingspriteHeight * sizeModifier);\n          this.width = fallingspriteWidth * sizeModifier;\n          this.height = fallingspriteHeight * sizeModifier;\n\n        } else {\n          ctx.drawImage(momoImage, 0 * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier);\n          this.width = walkspriteWidth * sizeModifier;\n          this.height = walkspriteHeight * sizeModifier;\n        }\n      }\n    } else if (this.ash){\n      if(this.jumped === false && this.xVelocity > 0 && this.direction === \"right\")  {\n        ctx.drawImage(ashyImage, frameX * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier);\n        this.width = walkspriteWidth * sizeModifier;\n        this.height = walkspriteHeight * sizeModifier;\n        if (gameFrame % staggerFrames == 0){\n          if (frameX < 3) frameX ++;\n          else frameX = 1;\n        }\n        \n        gameFrame++\n      } else if (this.jumped === false && this.xVelocity < 0 && this.direction === \"left\"){\n          ctx.drawImage(ashyLeft, frameX * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier);\n          this.width = walkspriteWidth * sizeModifier;\n          this.height = walkspriteHeight * sizeModifier;\n          if (gameFrame % staggerFrames == 0){\n            if (frameX < 3) frameX ++;\n            else frameX = 1;\n          }\n        \n        gameFrame++\n\n      // } else if (this.direction === \"scared\"){\n      //   ctx.drawImage(ashyScared, 0 * ashyScaredspriteWidth, 0, ashyScaredspriteWidth, ashyScaredspriteHeight, this.x, this.y, ashyScaredspriteWidth * sizeModifier, ashyScaredspriteHeight * sizeModifier);\n      //   this.width = ashyScaredspriteWidth * sizeModifier;\n      //   this.height = ashyScaredspriteHeight * sizeModifier;\n      // }\n        \n      // } else if (this.direction === \"scared\"){\n      //   ctx.drawImage(ambushImpactjustAsh, 0 * ambushImpactjustAshWidth, 0, ambushImpactjustAshWidth, ambushImpactjustAshHeight, this.x, this.y, ambushImpactjustAshWidth * sizeModifier, ambushImpactjustAshHeight * sizeModifier);\n      //   this.width = ambushImpactjustAshWidth * sizeModifier;\n      //   this.height = ambushImpactjustAshHeight * sizeModifier;\n      // }\n      \n      } else if (this.direction === \"scared\"){\n        ctx.drawImage(ambushImpact, 0 * ambushImpactWidth, 0, ambushImpactWidth, ambushImpactHeight, this.x - 75, this.y - 55, ambushImpactWidth * sizeModifier, ambushImpactHeight * sizeModifier);\n        this.width = ambushImpactWidth * sizeModifier; \n        this.height = ambushImpactHeight * sizeModifier;\n      }\n  \n      // } else {\n      //   ctx.drawImage(ashyImage, 0 * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier);\n      //   this.width = walkspriteWidth * sizeModifier;\n      //   this.height = walkspriteHeight * sizeModifier;\n      // }\n\n    } else if (this.fly){\n        ctx.drawImage(flyImage, frameX * flyImagewidth, 0, flyImagewidth, flyImageHeight, this.x, this.y, flyImagewidth * flysizeModifier, flyImageHeight * flysizeModifier);\n        this.width = flyImagewidth * flysizeModifier;\n        this.height = flyImageHeight * flysizeModifier;\n        if (gameFrame % staggerFrames == 0){\n          if (frameX < 3) frameX ++;\n          else frameX = 0;\n        }\n        \n        gameFrame++\n    } \n  }\n\n  // update Y position (height / vertical pos)\n  calcYPos(){\n    /// if momo is currently higher than ground,\n    /// and as long as momo isn't falling beyond fast rate (12), apply gravity (which is positive, so go down)\n    if (!this.fly){\n      if (this.yVelocity < CONSTANTS.TERMINAL_VEL && this.y < this.momoBottom() && !this.grounded){\n        this.yVelocity += CONSTANTS.GRAVITY;\n      } \n      if (this.grounded && !this.jumped && this.direction !== \"down\"){\n        this.yVelocity = 0;\n      }\n      if (this.y <= this.momoBottom()) {\n        /// momo falls down\n        this.y += this.yVelocity\n        // if momo tries to go lower than floor, stop her at floor. wipe her \"jumped\" state\n        if (this.y >= this.momoBottom()){\n          this.y = this.momoBottom();\n          this.jumped = false;\n          this.yVelocity = 0;\n          // if (this.level === \"AMBUSH\"){ \n          //   this.grounded = true;\n          // }\n        }\n      } \n    }\n  }\n  \n  // updates X position (horizontal across board)\n  //// if momo is moving , update x position\n  //// update x position with xvelocity, up to max momo speed\n  //// make sure you dont go beyond walls\n  //// if moving, apply friction until 1) vel is 0 OR 2) momo move backwards OR 3)jumping\n  //// friction here is a positive number (2)\n  calcXPos(){\n    //// if momo is not still\n    if (!this.ash){  \n      if (this.xVelocity !== 0){\n        //// update her x position by her velocity (left will be negative, right is positive)\n        this.x += this.xVelocity;\n        //// if she is falling \n        if (this.jumped === false) {\n          //// if she was in the middle of moving right while falling\n          if (this.xVelocity > 0){\n            //// apply friction against her movement\n            this.xVelocity -= CONSTANTS.FRICTION;\n            //// but stop her from flipping backwards (so friction can't overtake her)\n            if(this.xVelocity < 0){\n              this.xVelocity = 0;\n            }\n          //// if she was in the middle of moving left while fallling \n          } else {\n            //// apply friction against her movement\n            this.xVelocity += CONSTANTS.FRICTION;\n            //// but stop her from flipping forwards (so friction can't overtake her)\n            if(this.xVelocity > 0){\n              this.xVelocity = 0;\n            }\n          }\n        }\n        // so momo can't walk past canvas wall\n        if (this.x <= 0){\n          this.x = 0;\n          this.xVelocity = 0;\n        }\n        if (this.x >= (CONSTANTS.RIGHTWALL - (walkspriteWidth* sizeModifier))){\n          this.x = (CONSTANTS.RIGHTWALL - (walkspriteWidth* sizeModifier));\n          this.xVelocity = 0;\n        }\n      } \n    } else if (this.ash){\n      this.x += this.xVelocity\n    }\n\n  }\n\n  jump(){\n    // if momo is on the ground, then set velocity to jump speed (which is negative, which updates y-pos to be going up)\n    if (this.grounded){\n      this.jumped = true;\n      this.grounded = false;\n      this.yVelocity = CONSTANTS.JUMP_SPEED;\n    };\n\n  }\n  \n  moveLeft(speed){\n    this.direction = \"left\";\n    if (speed === \"walk\"){\n    this.xVelocity = -CONSTANTS.WALK_SPEED;\n    } else if (speed === \"run\"){\n      this.xVelocity = -CONSTANTS.RUN_SPEED;\n    }\n  }\n  \n  moveRight(speed){\n    this.direction = \"right\";\n    if (speed === \"walk\"){\n      this.xVelocity = CONSTANTS.WALK_SPEED;\n    } else if (speed === \"run\"){\n        this.xVelocity = CONSTANTS.RUN_SPEED;\n    }\n  }\n\n  moveDown(){\n    //// if momo is above ground\n    console.log('move down')\n    if (((this.y + this.height) < (this.momoBottom())) && this.grounded){\n      /// need to this this part once I make platforms\n      this.yVelocity = CONSTANTS.GRAVITY;\n      this.direction = \"down\";\n      this.grounded = false;\n    // } else if (this.y + this.height >= CONSTANTS.GROUND){\n    //   this.y = this.momoBottom();\n    };\n    \n    this.upsidedown = false;  \n  }\n\n\n  collide(obj, ignoreIfs){\n      //// if the object is \"collidable\" from their object attribute \"obj.collision\" (boolean)\n    if (obj.collision) {\n      //// this below is a collision\n      if (!this.grounded &&\n        //// if momo's left corner is to the left of the object length AND\n        this.x < obj.x + obj.width &&\n        //// momo's right corner overlaps/goes beyond object left corner\n        this.x + this.width > obj.x &&  \n        //// momo is higher than object \n        this.y < obj.y + obj.height &&\n        //// momo's feet is lower than object left corner\n        this.y + this.height > obj.y){\n        //// stop momo when she hits the platform from above (top collision). once momo collides, ground her.\n        if (this.yVelocity >= 0 && this.direction !== \"down\" && !ignoreIfs){\n          this.yVelocity = 0;\n          this.grounded = true;\n          this.jumped = false;    \n\n        //// this section is bottom collision\n        //// to enable jump from platform, we must have the below if condition (registering a jump keypress)\n        //// otherwise game will draw again, including running this collide method which would set momo jumped to false before \n        //// the jump can register\n        } else if (this.yVelocity < 0 && this.yVelocity >= CONSTANTS.JUMP_SPEED + 4  && !ignoreIfs) {\n          this.yVelocity = 2;\n          this.grounded = false;\n          this.jumped = false;\n          this.y = obj.y + obj.height + 1;\n          // console.log('grounded false')\n        }\n        return true;\n      //// below else means no collision\n      } else {\n        // console.log('grounded false')\n        if (!ignoreIfs) {\n          this.grounded = false; \n        }\n        return false;\n      }\n    }\n  }\n  \n\n  \n  //// this is momo's true ground or \"floor\" since she has height and we don't want her to sink below ground\n  //// momo bottom will change if you change her height so just use the standing sprite height\n  momoBottom(){\n    return CONSTANTS.GROUND - (walkspriteHeight * sizeModifier);\n  }\n\n  automateMovement(){\n    if (this.direction === \"right\"){\n      this.xVelocity = this.fly? CONSTANTS.FLYSPEED : CONSTANTS.WALK_SPEED;\n      if (this.x >= (CONSTANTS.RIGHTWALL - (walkspriteWidth* sizeModifier))){\n        // this.x = (CONSTANTS.RIGHTWALL - (walkspriteWidth* sizeModifier));\n        this.direction = \"left\";\n        this.xVelocity = this.fly? -CONSTANTS.FLYSPEED : -CONSTANTS.WALK_SPEED;\n      }\n    } \n    \n    if (this.direction === \"left\"){\n      this.xVelocity = this.fly? -CONSTANTS.FLYSPEED : -CONSTANTS.WALK_SPEED;\n      if (this.x >= (CONSTANTS.RIGHTWALL - (walkspriteWidth* sizeModifier))){\n        this.xVelocity = this.fly? -CONSTANTS.FLYSPEED : -CONSTANTS.WALK_SPEED;\n      } else if (this.x <= 0){\n      // this.x = 0;\n        this.xVelocity = this.fly? CONSTANTS.FLYSPEED : CONSTANTS.WALK_SPEED;\n        this.direction = \"right\";\n      }\n    }\n  }\n\n  changeStartingPos(x, y){\n    this.x = x;\n    this.y = y;\n  }\n\n}","//// not sure I need this? refactor? \n//// maybe for each game I change the background here\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from \"../index\";\n\n\nexport const level1Background = new Image();\nlevel1Background.src = \"./src/assets/backgrounds/kitchen_simplev3.png\"\nexport const level2Background = new Image();\nlevel2Background.src = \"./src/assets/backgrounds/ambushlivingroom.png\"\nexport const level4Background = new Image();\nlevel4Background.src = \"./src/assets/backgrounds/livingroom_updatedv4novase.png\"\n\n\n  ////  MINI GAME LOGIC (LEVEL)\n  //// 1. title (and subtitle if applicable)\n  //// 2. load background \n  //// 3. win condition\n\n  //// if you reach the intended flatform - done\n  //// designate object winning object - done\n  //// add collision winning platform in the game - done\n\nexport default class Level {\n  \n  constructor(id, title, subtitle, background, maxtime, objects, gravityModifier, target) {\n    this.id = id;\n    this.title = title;\n    this.subtitle = subtitle;\n    this.background = background;\n    this.maxtime = maxtime;\n    this.objects = objects;\n    this.target = target; \n    this.gravityModifier = gravityModifier;\n  }\n\n  drawBackground(ctx) {\n    ctx.fillStyle = \"whitesmoke\";\n    //// level1Background = climb kitchen  \n    if (this.background === level1Background){\n      ctx.drawImage(this.background, 0, 0, 3332, 2499, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    } else if (this.background === level2Background){\n      //// level2Background = ambush living room \n      ctx.drawImage(this.background, 0, 0, 1388, 1041, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    } else if (this.background === level4Background){\n      //// level4Background = climb living room \n      ctx.drawImage(this.background, 0, 0, 1180, 885, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    } \n\n  }\n\n  drawTitle(ctx){\n    // ctx.font = '60px sans-serif';\n    ctx.font = \"60px Itim, cursive\"\n    ctx.fillStyle = \"#daa520\";\n    ctx.fillText(this.title, 306, 80);\n    ctx.font = '18px Itim, cursive';\n    ctx.fillText(this.subtitle, 270, 120);\n  }\n  \n  drawWinStatement(ctx){\n    ctx.font = '24px  Itim, cursive';\n    ctx.fillStyle = \"#daa520\";\n    ctx.fillText(\"You win!\", 106, 80);\n  }\n  \n  drawLoseStatement(ctx){\n    ctx.font = '24px  Itim, cursive';\n    ctx.fillStyle = \"#daa520\";\n    ctx.fillText(\"You Lose! :(\", 106, 80);\n  }\n  //// forbidden furniture logic \n\n  //// v1 - kitchen_simple (target = fridge)\n  //// v2 - livingroom (target = curtain rod)\n\n  //// ambush ashy\n\n\n  //// kill the fly\n\n\n  //// win animation\n\n\n  //// lose animation\n\n\n\n}","//// logic for parent class objects\n//// all objects have shared properties:\n//// x & y coordinates, dimensions, if they are moving or not, do they have bounce\n//// collision here? or game?\n//// static objects: platforms, ground\n//// moving objects: momo, ash, (daphne?), fly\n\n\n\n\nexport default class GameObject {\n\n  //// generic constructor for all objects (x & y coordinates, dimensions, moving or not, collision T/F, bounce y/n\n  //// target means winning platform to hit\n  constructor(ctx, x, y, width, height, color = \"#000000\", collision, bounce, target) {\n    this.ctx = ctx;\n    this.x = x;\n    this.y = y;\n    this.width = width; \n    this.height = height;\n    //// leave below blank for static objects\n    this.yVelocity = 0;\n    this.xVelocity = 3;\n    this.color = color;\n    this.collision = collision;\n    // this.calcXPos.bind(this);  \n    // this.calcYPos.bind(this);\n    this.bounce = false;\n    this.target = target;\n  }\n\n\n\n  //// draw\n  draw(ctx){\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n  }\n  \n  drawPlatform(ctx){\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n  }\n  \n  \n  //// animate\n  automateMovement(){\n    if (this.direction === \"right\"){\n      this.xVelocity = CONSTANTS.WALK_SPEED;\n      if (this.x >= (CONSTANTS.RIGHTWALL - (walkspriteWidth* sizeModifier))){\n        // this.x = (CONSTANTS.RIGHTWALL - (walkspriteWidth* sizeModifier));\n        this.direction = \"left\";\n        this.xVelocity = -CONSTANTS.WALK_SPEED;\n      }\n    } \n    \n    if (this.direction === \"left\"){\n      this.xVelocity = -CONSTANTS.WALK_SPEED;\n      if (this.x >= (CONSTANTS.RIGHTWALL - (walkspriteWidth* sizeModifier))){\n        this.xVelocity = -CONSTANTS.WALK_SPEED;\n      } else if (this.x <= 0){\n      // this.x = 0;\n        this.xVelocity = CONSTANTS.WALK_SPEED;\n        this.direction = \"right\";\n      }\n    }\n  }\n\n\n}","import Game from './scripts/game';\nimport GameView from './scripts/game_view';\nimport Momo from './scripts/momo';\n\n\nconst canvas = document.getElementById(\"gamescreen\");\nconst ctx = canvas.getContext(\"2d\");\n\nexport const CANVAS_WIDTH = canvas.width = 800;\nexport const CANVAS_HEIGHT = canvas.height = 600;\n\n\n//// start game here\n\nlet game = new Game(canvas);\n\n\n\n","import Momo, { CONSTANTS } from './momo';\nimport Level, { level1Background, level2Background, level4Background} from './level'\nimport GameObject from './game_object';\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from '../index.js';\nimport Music from './music';\n\n\n//// starting a new game should entail:\n//// import /load game_view (or does new game go into game_view?) --> ask someone \n//// creating a canvas, saving ctx\n//// loop over all opjects, animate all\n//// logic to start a minigame and continue to next one if win (and update score) (random)\n//// go back to main screen on loss \n\n//// new level constructor(id, title, subtitle, background, maxtime, objects, gravityModifier, target) \n// const level1 = new Level('Forbidden furniture!', 'Get on the highest piece of furniture!', level1Background, 6, level1Objects, fridge);\n// const level2 = new Level('Ambush Ashy!', '', level2Background, 6, level2Objects, ashy);\n// const level3 = new Level('Kill the fly!', '', level2Background, 6, level3Objects, fly);\n\n/// make sure ground and firstObjectHidden appear first in each levelObjects array\n\n\nexport default class Game {\n\n  constructor(canvas) {\n    this.ctx = canvas.getContext(\"2d\");\n    this.dimensions = { width: CANVAS_WIDTH, height: CANVAS_HEIGHT };\n    this.canvas = canvas;\n    // this momo is the real momo, okay. \n    this.momo = new Momo(this.dimensions.width, this.dimensions.height, false, false);\n    /// use #FFffff for transparent\n    /// use #7cfd21 for bright green (starting out to gauge pos)\n    //// this is the ground below:\n    const ground = new GameObject(this.ctx, 0, CONSTANTS.GROUND, CANVAS_WIDTH, 61, \"#449903\", false, false, false);  \n    //// if I can't figure out why the first object collision doesn't work, set the first object as 0 and in the ground\n    const firstObjectHidden = new GameObject(this.ctx, 0, 800, 0, 0, \"#000000\", true, false, false);\n    //// ground, then firstObjectHidden must go in each levelObjects array\n    const fridge = new GameObject(this.ctx, 58, 158, 135, 5, \"#7cfd21\", true, false, true);\n    const sinkLevel = new GameObject(this.ctx, 208, 364, 340, 5, \"#fde321\", true, false, false);\n    const leftShelf = new GameObject(this.ctx, 450, 203, 120, 5, \"#fde321\", true, false, false);\n    // const rightShelf = new GameObject(this.ctx, 579, 173, 140, 5, \"#7cfd21\", true, false, false);\n    //// level 4 objects\n    const curtainrod = new GameObject(this.ctx, 265, 160, 165, 5, \"#7cfd21\", true, false, true);\n    // const couchCushion = new GameObject(this.ctx, 92, 431, 280, 5, \"#7cfd21\", true, false, false);\n    const couchCushion = new GameObject(this.ctx, 290, 430, 90, 5, \"#fde321\", true, false, false);\n    const couchTop = new GameObject(this.ctx, 80, 360, 160, 5, \"#fde321\", true, false, false);\n    // const tvConsole = new GameObject(this.ctx, 478, 416, 276, 5, \"#7cfd21\", true, false, false);\n    const tv = new GameObject(this.ctx, 537, 311, 160, 5, \"#fde321\", true, false, false);\n    //// need to fix Ashy later\n    // const Ashy = new GameObject(this.ctx, 579, 173, 140, 1, \"#7cfd21\", true, false, true);\n    this.Ashy = new Momo(this.dimensions.width, this.dimensions.height, true, false);\n    const fauxshelf = new GameObject(this.ctx, 235, 280, 200, 5, \"#7cfd21\", false, false, false);\n    const hiddenledge = new GameObject(this.ctx, 250, 275, 200, 5, \"#FFffff\", true, false, false);\n    this.fly = new Momo(this.dimensions.width, this.dimensions.height, false, true);\n    // const fly = new GameObject(this.ctx, 579, 173, 140, 1, \"#7cfd21\", true, false, true); \n    // GameObject constructor(ctx, x, y, width, height, color, collision, bounce, target) {\n    // const <objName> = new GameObject(this.ctx, 248, 162, 206, 5, \"#7cfd21\", true, false, true);\n\n    //// forbidden furniture v1 (kitchen)  \n    const level1Objects = [\n      ground,\n      firstObjectHidden,\n      fridge,\n      sinkLevel,\n      // leftShelf,\n      // rightShelf\n    ];\n    //// ambush ashy (kitchen)  \n    const level2Objects = [\n      ground,\n      firstObjectHidden,\n      // fauxshelf,\n      hiddenledge\n      // this.Ashy,\n      \n    ];\n    //// kill the fly (living room)  \n    const level3Objects = [\n      ground,\n      firstObjectHidden\n      /// use this.fly (which is a momo. lol)\n    ];\n    //// forbidden furniture v2 (living room)\n    const level4Objects = [\n      ground,\n      firstObjectHidden,\n      curtainrod,\n      couchCushion,\n      couchTop,\n      // tvConsole,\n      tv\n      \n    ];\n\n    const level6Objects = [\n      ground,\n      firstObjectHidden,\n      couchTop,\n    \n    ];\n\n    //// constructor(id, title, subtitle, background, maxtime, objects, gravityModifier, target)\n    this.levels = [ \n      new Level(1, 'CLIMB', '', level1Background, 10, level1Objects, 1, fridge),\n      new Level(2, 'AMBUSH', '', level2Background, 6, level2Objects, 1, this.Ashy),\n      new Level(3, 'KILL', '', level4Background, 4, level3Objects, 1, this.fly),\n      new Level(4, 'CLIMB', '', level4Background, 10, level4Objects, 1, curtainrod),\n      new Level(5, 'KILL', '', level1Background, 7, level1Objects, 1, this.fly),\n      new Level(6, 'KILL', '', level4Background, 7, level6Objects, 1, this.fly),\n      // new Level(id, 'ESCAPE', '', level2Background, 10, level4Objects, 1.5, curtainrod),\n    ];\n    this.prevlevel = null;\n    // this.level = this.randomSelectLevel();     //// in the future, should start randomly? or always level0?\n    this.level = this.levels[0];\n    this.winCounter = 0;\n    this.wonMiniGame = false;\n    this.lostGame = false;\n    this.score = 0;\n    this.running = false;\n    this.started = false;\n    // this.play(); //// replace play with a screen that says click to start! or instructions screen\n    this.addEventListeners();\n    this.startGameScreen();\n    // this.resetGame(); //// should we have play reset game? \n\n  }\n\n\n  //// return a random level from this.levels (plural);\n  //// iterate thru array so you don't get two of the same game in a row. shuffle array when you've gone through all levels\n  randomSelectLevel(){\n    \n    if (!this.prevlevel) {\n      return this.levels[0];\n    } else if (this.prevlevel === this.levels[0]){\n      return this.levels[1];\n    } else if (this.prevlevel === this.levels[1]){\n      return this.levels[2];\n    } else if (this.prevlevel === this.levels[2]){\n      return this.levels[3];\n    } else if (this.prevlevel === this.levels[3]){\n      return this.levels[4];\n    } else if (this.prevlevel === this.levels[4]){\n      return this.levels[5]; \n    } else if (this.prevlevel === this.levels[5]){\n      this.shuffleLevelArray();\n      return this.levels[0];\n    }\n \n    // //// testing level4\n    // if (this.prevlevel === this.levels[2]){\n    //   return this.levels[2];    \n    // } else {\n    //   return this.levels[2];   \n    // }\n    // return this.levels[1];\n  }\n\n  shuffleLevelArray(){\n    let shuffled = this.levels.sort(() => Math.random() - 0.5);\n    this.levels = shuffled;\n  }\n  \n  play(){\n    this.started = true;\n    this.running = true;\n    // this.addEventListeners();\n    this.resetGame();\n  }\n \n  //// if adding event listeners to canvas, need to pass in bound callback\n  addEventListeners(){\n    window.addEventListener(\"keydown\", this.keydownEvents.bind(this));\n    // this.setWonMiniGame.bind(this);\n    this.resetGame.bind(this); //// won't let me bind here. Uncaught TypeError: Cannot read properties of undefined (reading 'bind')\n    // a canvas example: this.canvas.addEventListener(\"mousedown\", this.click.bind(this));\n  }\n   \n  /// maybe change momo to run regardless because jumping is better\n  keydownEvents(e){\n    if (e.key === \"ArrowLeft\") {\n      if (e.repeat){\n        this.momo.moveLeft(\"run\");\n      } else if (!e.repeat){\n        this.momo.moveLeft(\"walk\");\n      }\n    } else if (e.key === \"ArrowUp\") {\n        this.momo.jump();\n    } else if (e.key === \"ArrowDown\") {     // fall through platform if not on ground\n        this.momo.moveDown();\n    } else if (e.key === \"ArrowRight\"){\n      if (e.repeat){\n        this.momo.moveRight(\"run\");\n      } else if (!e.repeat){\n        this.momo.moveRight(\"walk\");\n      }\n    } else if (e.key === ' ' || e.key === \"Spacebar\"){\n        this.pauseGame();\n    // } else if (e.key === \"ShiftLeft\" || e.key === \"ShiftRight\"){\n    //     this.gameAction();\n    } else if (e.key === \"Enter\" && !this.running && !this.started){\n        this.play();\n    }\n    //// ^ to do later: add action key for spacebar          \n  }\n    \n\n\n  animate(){\n    if (this.running){\n      this.ctx.clearRect(0,0,CANVAS_WIDTH,CANVAS_WIDTH);         /// clear the canvas\n      this.level.drawBackground(this.ctx);     /// draw the level's background\n      this.level.drawTitle(this.ctx);          /// draw the level's title (and subtitle, if applicable)\n      this.wonMiniGame = false;\n      for(const obj of this.level.objects){    //// iterate through this level's obejcts and check collision\n        if (this.momo.collide(obj)){\n          if (obj.target === true) {          //// if she collides with winning object, win game\n            this.winCounter += 1;\n            if (this.winCounter > 11){\n              this.running = false;\n              this.wonMiniGame = true;\n              this.winMiniGame();\n            }\n          }       \n          break;\n        };\n      };\n      \n      for(const obj of this.level.objects){         //// iterate through this level's obejcts and draw them\n        obj.draw(this.ctx);\n      };\n\n      if (this.level.title === \"AMBUSH\"){\n        this.Ashy.draw(this.ctx); \n        this.Ashy.automateMovement();\n        if (this.momo.collide(this.Ashy, true)){      ///true meaning ignoreIfs in collide function\n          this.Ashy.direction = \"scared\";\n          this.Ashy.draw(this.ctx);\n          this.running = false;\n          this.wonMiniGame = true;\n          this.winMiniGame();\n        }\n        console.log(\"debugging\")\n        if (this.momo.y >= this.momo.momoBottom()){ \n          console.log(\"lose game - why no lose?\")\n          this.running = false;\n          this.lostGame = true;                      \n          this.loseGame();\n        }\n      } else if (this.level.title === \"KILL\"){\n        this.fly.draw(this.ctx);\n        this.fly.automateMovement();\n        if (this.momo.collide(this.fly, true)){      ///true meaning ignoreIfs in collide function\n          // this.fly.direction = \"scared\";\n          // this.fly.draw(this.ctx);\n          this.running = false;\n          this.wonMiniGame = true;\n          this.winMiniGame();\n        }\n      } \n\n      if (this.level.title !== 'AMBUSH' || !this.wonMiniGame) {\n        this.momo.draw(this.ctx);\n      }\n\n      this.ctx.font = '22px  Itim, cursive';\n      this.ctx.fillStyle = \"#daa520\";\n      this.ctx.fillText('Score:', 657, 75);\n      this.ctx.fillText(this.score.toString(), 735, 75);          //// draw score\n      this.ctx.fillText('Time left:', 626, 100);                //// draw timer countdown\n      this.ctx.fillText(this.timeremaining.toString(), 735, 100);          //// draw score\n      ///// draw time left here\n      let id = requestAnimationFrame(this.animate.bind(this));\n\n\n      this.timeremaining -= 0.02;\n      if (this.timeremaining <= 0){                 //// this is something wrong with this. \n        this.running = false;\n        this.lostGame = true;                       //// can't read this.level.maxtime;\n        this.loseGame();\n      }\n\n    } else if (!this.running && !this.paused){\n        if (this.wonMiniGame){ \n          this.ctx.fillStyle = \"#00000080\";\n          this.ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n          this.ctx.font = '50px  Itim, cursive';\n          this.ctx.fillStyle = \"#daa520\";\n          this.ctx.fillText(' *** WIN GAME ***', CANVAS_WIDTH/3.75, CANVAS_HEIGHT/2);\n        } else if (this.lostGame){\n          \n          this.ctx.fillStyle = \"#000000CC\";\n          this.ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n          this.ctx.font = '50px  Itim, cursive';\n          this.ctx.fillStyle = \"#daa520\";\n          this.ctx.fillText(' *** GAME OVER ***', CANVAS_WIDTH/3.75, CANVAS_HEIGHT/2);\n        }\n    } else if (!this.running && this.paused){\n      \n      this.ctx.fillStyle = \"#000000CC\";\n      this.ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n      this.ctx.font = '50px  Itim, cursive';\n      this.ctx.fillStyle = \"#daa520\";\n      this.ctx.fillText(' *** PAUSED ***', CANVAS_WIDTH/3.75, CANVAS_HEIGHT/2);\n    }\n  }\n  \n  //// pause\n  pauseGame(){\n    if (!this.running){\n      this.running = true;\n      this.paused = false;\n      this.animate();\n    } else if (this.running){\n      this.running = false;\n      this.paused = true;\n    }\n  }\n  // (upsidedownMomoright, frameX * walkspriteWidth, 0, walkspriteWidth, walkspriteHeight, this.x, this.y, walkspriteWidth * sizeModifier, walkspriteHeight * sizeModifier)\n  startGameScreen(){\n    this.ctx.fillStyle = \"#F5F5DC\";\n    this.ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    // this.ctx.drawImage(momoCanonball, 500, 0);\n    this.ctx.font = '50px  Itim, cursive';\n    this.ctx.fillStyle = \"#daa520\";\n    this.ctx.fillText('Press Enter to Start Game', CANVAS_WIDTH/7.5, 150);\n    this.ctx.fillText('-> Arrow keys to move', CANVAS_WIDTH/7.5, 350);\n    this.ctx.fillText('-> Spacebar to pause', CANVAS_WIDTH/7.5, 450);\n  }\n\n  retryGameScreen(){\n    this.ctx.fillStyle = \"#000000\";\n    this.ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n    this.ctx.font = '50px  Itim, cursive';\n    this.ctx.fillStyle = \"#daa520\";\n\n    this.ctx.fillText('Your high score was ' + this.score, CANVAS_WIDTH/8, CANVAS_HEIGHT/3);\n    this.ctx.fillText('Press Enter to Retry', CANVAS_WIDTH/8, CANVAS_HEIGHT/2);\n  }\n\n  // splashscreen(){\n  //   this.ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n  //   this.ctx.fillStyle = \"#F5F5DC\";\n  //   this.ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n  //   this.ctx.drawImage(momoCanonball, 0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n  // }\n  \n  //// lose? when timer runs out. where do I decriment time? \n  //// resetScore\n  loseGame(){\n    /// splash for you lose! sad momo sound\n    this.level.drawLoseStatement(this.ctx);\n    //// black out / fade out screen\n    //// ask to play again? \n    this.started = false;\n    // this.lostGame = true;\n    setTimeout(()=>{\n      this.retryGameScreen();\n    }, 1000)\n  }\n\n\n  resetGame(){\n    this.prevlevel = this.level;      //// save current level as prev level\n    this.winCounter = 0;              //// reset win counter\n    if (this.wonMiniGame){\n      this.score += 1;                //// increment score if won\n      this.wonMiniGame = false;\n    } else if (this.lostGame){\n      this.score = 0;                 //// wipe score if lost\n      this.lostGame = false;\n      this.started = false;\n    }\n    this.level = this.randomSelectLevel();         //// select a new level\n    this.timeremaining = this.level.maxtime;\n    this.momo.reset();\n    if (this.level.title === \"AMBUSH\"){\n      this.momo.level = \"AMBUSH\";\n      this.momo.grounded = true;\n      this.momo.upsidedown = true;\n      this.momo.changeStartingPos(300, 190);\n      this.Ashy.direction = \"right\";\n      this.Ashy.collision = true;\n      this.Ashy.xVelocity = CONSTANTS.WALK_SPEED;\n    } else if (this.level.title === \"KILL\"){\n      this.momo.level = \"KILL\";\n      this.momo.grounded = true;\n      if (this.level.id === 3){\n        this.fly.changeStartingPos(300, 170);\n      } else if (this.level.id === 5){\n        this.fly.changeStartingPos(425, 85);\n      } else if (this.level.id === 6){  \n        this.fly.changeStartingPos(275, 65);\n      }\n      this.fly.direction = \"right\";\n      this.fly.collision = true;\n      this.fly.xVelocity = CONSTANTS.WALK_SPEED;\n    }\n\n    this.running = true;\n    this.animate();\n  }\n\n\n  //// play win animation, move to next game, update count, play a victory sound\n  winMiniGame(){\n    //// show win statement \n    //// play win sound\n    //// splash for you won!\n    this.level.drawWinStatement(this.ctx);\n    // this.resetGame();               //// restart game \n    setTimeout(()=>{\n      this.resetGame();\n    }, 2000)\n  }\n\n \n  \n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","momoImage","Image","src","momoLeft","walkspriteWidth","walkspriteHeight","momoJumpRight","momoJumpLeft","momoFalling","momoAmbush","upsidedownMomoright","upsidedownMomoleft","ashyImage","ashyLeft","ambushImpact","flyImage","frameX","gameFrame","staggerFrames","Momo","constructor","canvasWidth","canvasHeight","ash","fly","level","this","calcXPos","bind","calcYPos","jump","upsidedown","reset","width","height","x","y","momoBottom","yVelocity","xVelocity","direction","jumped","grounded","draw","ctx","prevPos","drawImage","ambushImpactWidth","ambushImpactHeight","flyImagewidth","flyImageHeight","jumpspriteWidth","jumpspriteHeight","ambushspriteWidth","ambushspriteHeight","fallingspriteWidth","fallingspriteHeight","CONSTANTS","moveLeft","speed","moveRight","moveDown","console","log","collide","ignoreIfs","collision","automateMovement","changeStartingPos","level1Background","level2Background","level4Background","Level","id","title","subtitle","background","maxtime","objects","gravityModifier","target","drawBackground","fillStyle","CANVAS_WIDTH","CANVAS_HEIGHT","drawTitle","font","fillText","drawWinStatement","drawLoseStatement","GameObject","color","bounce","fillRect","drawPlatform","WALK_SPEED","RIGHTWALL","sizeModifier","canvas","document","getElementById","getContext","dimensions","momo","ground","firstObjectHidden","fridge","sinkLevel","curtainrod","couchCushion","couchTop","tv","Ashy","hiddenledge","level1Objects","level2Objects","level3Objects","level4Objects","level6Objects","levels","prevlevel","winCounter","wonMiniGame","lostGame","score","running","started","addEventListeners","startGameScreen","randomSelectLevel","shuffleLevelArray","shuffled","sort","Math","random","play","resetGame","window","addEventListener","keydownEvents","e","repeat","pauseGame","animate","clearRect","winMiniGame","loseGame","toString","timeremaining","requestAnimationFrame","paused","retryGameScreen","setTimeout"],"sourceRoot":""}